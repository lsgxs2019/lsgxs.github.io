<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Gxs&#39;s Blog</title>
    <link>https://lsgxs.github.io/</link>
    <description>Recent content on Gxs&#39;s Blog</description>
    <image>
      <url>https://lsgxs.github.io/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</url>
      <link>https://lsgxs.github.io/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</link>
    </image>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Thu, 24 Nov 2022 17:42:04 +0800</lastBuildDate><atom:link href="https://lsgxs.github.io/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>PaperMod  QuickStart</title>
      <link>https://lsgxs.github.io/posts/technology/hugo/papermod/</link>
      <pubDate>Wed, 02 Nov 2022 13:09:03 +0000</pubDate>
      
      <guid>https://lsgxs.github.io/posts/technology/hugo/papermod/</guid>
      <description>Desc Text.</description>
    </item>
    
    <item>
      <title>Hugo主题PaperMod目录结构的两种组织方式</title>
      <link>https://lsgxs.github.io/posts/technology/papermod%E7%9A%84%E4%B8%A4%E7%A7%8D%E7%9B%AE%E5%BD%95%E7%BB%84%E7%BB%87%E6%96%B9%E5%BC%8F/</link>
      <pubDate>Wed, 23 Nov 2022 16:46:21 +0800</pubDate>
      
      <guid>https://lsgxs.github.io/posts/technology/papermod%E7%9A%84%E4%B8%A4%E7%A7%8D%E7%9B%AE%E5%BD%95%E7%BB%84%E7%BB%87%E6%96%B9%E5%BC%8F/</guid>
      <description>Hugo主题PaperMod目录结构的两种组织方式 hugo 的官方文档里定义了页面资源的组织方式，叫做Page Bundles。有Leaf Bundle和Branch Bundle两种。下面的文字引用自hugo官方文档：
Leaf Bundles A Leaf Bundle is a directory at any hierarchy within the content/ directory, that contains an index.md file.
Examples of Leaf Bundle organization 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 content/ ├── about │ ├── index.md ├── posts │ ├── my-post │ │ ├── content1.md │ │ ├── content2.md │ │ ├── image1.</description>
    </item>
    
    <item>
      <title>Papermod参数设置</title>
      <link>https://lsgxs.github.io/posts/technology/hugo/papermod%E5%8F%82%E6%95%B0%E8%AE%BE%E7%BD%AE/</link>
      <pubDate>Tue, 22 Nov 2022 17:20:56 +0800</pubDate>
      
      <guid>https://lsgxs.github.io/posts/technology/hugo/papermod%E5%8F%82%E6%95%B0%E8%AE%BE%E7%BD%AE/</guid>
      <description>PaperMod主题config.yml文件的常用参数及设置 paginate : 8 一页显示8个文档
theme: PaperMod 主题名称
ShowCodeCopyButtons: 显示代码复制按钮
UseHogoToc: false 设置为false，可以使用下面两项使用PaperMod自带的toc设置
showtoc: true
tocopen: true
weight： 决定这篇文章的优先级，可以把经常需要看的置顶，设置为1、2、3等顺序。
ProfileMode:
enabled : true 设置为true的话，主题显示为profile mode 风格，设置为false为regular常规模式 menu下的main :
identifier: archives
name: archives
url: /archives/
weight: 10
- identifier: posts
name: posts
url: /posts/
weight: 10
- identifier: tags
name: tags
url: /tags/
weight: 20
- identifier: search
name: search
url: /search/
weight: 10
​ 这里对应的是模板文件：archives、posts、search
先记录这些，基本可以让博客运行起来，其他的可以再测试。
Front Matter区域的参数设置 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 itle: &amp;#34;{{ replace .</description>
    </item>
    
    <item>
      <title>MyPaperModQucikStart</title>
      <link>https://lsgxs.github.io/posts/technology/mypapermodqucikstart/</link>
      <pubDate>Thu, 24 Nov 2022 17:42:04 +0800</pubDate>
      
      <guid>https://lsgxs.github.io/posts/technology/mypapermodqucikstart/</guid>
      <description>Desc Text.</description>
    </item>
    
    <item>
      <title>阅读计划</title>
      <link>https://lsgxs.github.io/posts/read/%E9%98%85%E8%AF%BB%E8%AE%A1%E5%88%92/</link>
      <pubDate>Thu, 24 Nov 2022 13:19:38 +0800</pubDate>
      
      <guid>https://lsgxs.github.io/posts/read/%E9%98%85%E8%AF%BB%E8%AE%A1%E5%88%92/</guid>
      <description>Desc Text.</description>
    </item>
    
    <item>
      <title>不要和任何人讨论股票</title>
      <link>https://lsgxs.github.io/posts/stock/%E4%B8%8D%E8%A6%81%E5%92%8C%E4%BB%BB%E4%BD%95%E4%BA%BA%E8%AE%A8%E8%AE%BA%E8%82%A1%E7%A5%A8/</link>
      <pubDate>Thu, 24 Nov 2022 12:47:15 +0800</pubDate>
      
      <guid>https://lsgxs.github.io/posts/stock/%E4%B8%8D%E8%A6%81%E5%92%8C%E4%BB%BB%E4%BD%95%E4%BA%BA%E8%AE%A8%E8%AE%BA%E8%82%A1%E7%A5%A8/</guid>
      <description>Desc Text.</description>
    </item>
    
    <item>
      <title>Difference Between Git Clone Submoudule Downlaod</title>
      <link>https://lsgxs.github.io/posts/technology/difference-between-git-clone-submoudule-downlaod/</link>
      <pubDate>Wed, 23 Nov 2022 22:48:02 +0800</pubDate>
      
      <guid>https://lsgxs.github.io/posts/technology/difference-between-git-clone-submoudule-downlaod/</guid>
      <description>Desc Text.</description>
    </item>
    
    <item>
      <title>page bundle</title>
      <link>https://lsgxs.github.io/posts/technology/hugo/pagebundle/</link>
      <pubDate>Tue, 22 Nov 2022 22:12:51 +0800</pubDate>
      
      <guid>https://lsgxs.github.io/posts/technology/hugo/pagebundle/</guid>
      <description>Desc Text.</description>
    </item>
    
    <item>
      <title>ExampleSite</title>
      <link>https://lsgxs.github.io/posts/technology/examplesite/</link>
      <pubDate>Fri, 18 Nov 2022 23:06:19 +0800</pubDate>
      
      <guid>https://lsgxs.github.io/posts/technology/examplesite/</guid>
      <description>关于Themes中自带ExampleSite的使用方法 学习一个新的hugo博客站点主题，可以使用主题中自带的ExampleSite站点 1 2 3 4 5 6 7 8 $ mkdir your-site $ cd your-site $ mkdir themes $ cd themes $ git clone https://github.com/repository-url.git $ cp -r themes-name/exampleSite/** ../ --把ExampleSite站点目录下的所有内容复制到你的站点根目录 $ cd .. $ hugo serve 如果你的站点已经是一个git 仓库项目了，可以使用git submoudle 的方法添加这个主题。 1 2 3 git submodule add https://github.com/repository-name themes/theme-name hugo serve -t hugo-theme-name http://localhost:1313 </description>
    </item>
    
    <item>
      <title>在github基于个人或公司GitHub Pages部署hugo博客之二</title>
      <link>https://lsgxs.github.io/posts/technology/%E5%9C%A8github%E5%9F%BA%E4%BA%8E%E4%B8%AA%E4%BA%BA%E6%88%96%E5%85%AC%E5%8F%B8githubpages%E9%83%A8%E7%BD%B2hugo%E5%8D%9A%E5%AE%A2%E4%B9%8B%E4%BA%8C/</link>
      <pubDate>Tue, 15 Nov 2022 20:02:48 +0800</pubDate>
      
      <guid>https://lsgxs.github.io/posts/technology/%E5%9C%A8github%E5%9F%BA%E4%BA%8E%E4%B8%AA%E4%BA%BA%E6%88%96%E5%85%AC%E5%8F%B8githubpages%E9%83%A8%E7%BD%B2hugo%E5%8D%9A%E5%AE%A2%E4%B9%8B%E4%BA%8C/</guid>
      <description>使用自定义的actons workflow,在仓库的两个分支之间实现hugo博客站点自动化部署 用仓库的main分支保存博客项目源文件，用仓库的另外一个手动建立的独立分支gh-pages保存编译后的静态文件。这里依然以username.github.io形式的仓库为例。自己手动建立独立的gh-pages分支。
在github上新建username.github.io形式的空仓
在本地根据hugo官网推荐的QuickStart入门教程，建立Hugo博客项目
1 2 3 4 5 6 7 8 9 10 hugo new site hugo cd hugo git init git submodule add https://github.com/theNewDynamic/gohugo-theme-ananke.git themes/ananke 编辑config.toml文件，在最后新增 theme = &amp;#34;ananke&amp;#34; 修改baseURL = &amp;#34;https://username.github.io&amp;#34; hugo new posts/文档名称作为目录名/index.md --编辑自己的文档 git add . git commit -m &amp;#34;新增文档&amp;#34; git push -u origin main --第一次推送到空仓username.github.io时要带上-u参数，以后不需要带-u参数 在本地新建一个独立分支gh-pages
1 2 3 4 5 6 git checkout --orphan gh-pages echo &amp;#34;hello github gh-pages&amp;#34; &amp;gt; readme.md git add .</description>
    </item>
    
    <item>
      <title>设置post模版</title>
      <link>https://lsgxs.github.io/posts/technology/papermod%E7%9A%84%E6%A8%A1%E7%89%88/</link>
      <pubDate>Tue, 15 Nov 2022 11:30:03 +0000</pubDate>
      
      <guid>https://lsgxs.github.io/posts/technology/papermod%E7%9A%84%E6%A8%A1%E7%89%88/</guid>
      <description>Desc Text.</description>
    </item>
    
    <item>
      <title>在github基于个人或公司GitHub Pages部署hugo博客之一</title>
      <link>https://lsgxs.github.io/posts/technology/%E5%9C%A8github%E5%9F%BA%E4%BA%8E%E4%B8%AA%E4%BA%BA%E6%88%96%E5%85%AC%E5%8F%B8githubpages%E9%83%A8%E7%BD%B2hugo%E5%8D%9A%E5%AE%A2%E4%B9%8B%E4%B8%80/</link>
      <pubDate>Mon, 14 Nov 2022 22:47:45 +0800</pubDate>
      
      <guid>https://lsgxs.github.io/posts/technology/%E5%9C%A8github%E5%9F%BA%E4%BA%8E%E4%B8%AA%E4%BA%BA%E6%88%96%E5%85%AC%E5%8F%B8githubpages%E9%83%A8%E7%BD%B2hugo%E5%8D%9A%E5%AE%A2%E4%B9%8B%E4%B8%80/</guid>
      <description>Desc Text.</description>
    </item>
    
    <item>
      <title>在github部署静态博客站点的三种方式</title>
      <link>https://lsgxs.github.io/posts/technology/%E5%9C%A8github%E9%83%A8%E7%BD%B2%E9%9D%99%E6%80%81%E5%8D%9A%E5%AE%A2%E7%AB%99%E7%82%B9%E7%9A%84%E4%B8%89%E7%A7%8D%E6%96%B9%E5%BC%8F/</link>
      <pubDate>Mon, 14 Nov 2022 08:49:58 +0800</pubDate>
      
      <guid>https://lsgxs.github.io/posts/technology/%E5%9C%A8github%E9%83%A8%E7%BD%B2%E9%9D%99%E6%80%81%E5%8D%9A%E5%AE%A2%E7%AB%99%E7%82%B9%E7%9A%84%E4%B8%89%E7%A7%8D%E6%96%B9%E5%BC%8F/</guid>
      <description>最近使用hexo 和hugo两种静态站点框架在github上部署博客，总结一下有三种常用的部署方式：
在两个不同的仓库之间使用githbu actions flow自动化部署站点 一个仓库作为博客项目源文件的存储空间 另外一个仓库作为博客项目生成的静态文件发布源 具体的实现可以参照自己hexo博客的部署项目源文件 在一个仓库的两个不同分支之间部署博客站点 首先要建立一个username.github.io的仓库，在main分支保存博客项目源文件。 其次是在本地建立一个独立分支gh-pages，用这个分支来发布生成的静态网页文件 利用github基于项目的github pages服务 在仓库的main分支保存博客项目源文件 在项目的根目录下建立docs目录，并修改config.toml文件，在文件末尾添加publish = &amp;ldquo;docs&amp;quot;的数据项。github项目仓库默认使用docs作为静态站点发布源，替代了public目录的作用，可以删除public目录。 也就是说在一个仓库的main分支下保存源文件，同时把项目根目录的docs目录作为静态站点发布源。 </description>
    </item>
    
    <item>
      <title>Hugo自动化部署到github</title>
      <link>https://lsgxs.github.io/posts/technology/hugo%E8%87%AA%E5%8A%A8%E5%8C%96%E9%83%A8%E7%BD%B2%E5%88%B0github/</link>
      <pubDate>Sun, 13 Nov 2022 21:53:09 +0800</pubDate>
      
      <guid>https://lsgxs.github.io/posts/technology/hugo%E8%87%AA%E5%8A%A8%E5%8C%96%E9%83%A8%E7%BD%B2%E5%88%B0github/</guid>
      <description>使用github的actions workflow把hugo博客自动化部署到github 部署静态博客站点到github一般有两种方法，第一种是手动建立项目，添加文档，最后使用git命令部署到github仓库。第二种方法是使用github提供的actions flow实现自动化部署，一般可以通过两个分支来实现。
一个分支保存项目源文件、
一般为main分支，把项目的源文件推送到这个分支，既可以保存源文件，又可以从这里开始执行自动化部署到本仓库的另外一个分支。
手动建立一个独立的gh-pages分支
1 2 3 4 5 6 7 8 git checkout --orphan gh-pages echo &amp;#34;hello gh-pages&amp;#34; &amp;gt; readme.md git add . git commit -m &amp;#34;udpate with orphan branch gh-pages&amp;#34; git push origin gh-pages git branch -a --经过上面的创建新的独立分支到最后的提交、推送，到这里才可以看到这个新建的分支 -- 然后可以把gh-pages分支下除了.git目录之外的所有目录和文件删除，推送到远程，专门来保存自动部署生成的静态站点文件 -- 当然可以试一下不必手动删除这些目录和文件，看看系统是不是会自动清理删除这些目录和文件。 编写actions自动部署脚本
首先在项目的根目录下新建脚本文件：.github\workflows\hugo-actions.yml。如果提示不能新建.开头的目录，就从别的地方复制过来，编辑一下路径和文件名。 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 name: Deploy Hugo on: push: branches: - main jobs: build-deploy: runs-on: ubuntu-18.</description>
    </item>
    
    <item>
      <title>测试hugo渲染</title>
      <link>https://lsgxs.github.io/posts/technology/%E4%BD%BF%E7%94%A8hugo%E5%9C%A8githubpages%E4%B8%8A%E5%8F%91%E5%B8%83%E9%9D%99%E6%80%81%E5%8D%9A%E5%AE%A2%E9%81%87%E5%88%B0%E7%9A%84%E4%B8%A4%E4%B8%AA%E9%97%AE%E9%A2%98/</link>
      <pubDate>Sun, 13 Nov 2022 08:31:38 +0800</pubDate>
      
      <guid>https://lsgxs.github.io/posts/technology/%E4%BD%BF%E7%94%A8hugo%E5%9C%A8githubpages%E4%B8%8A%E5%8F%91%E5%B8%83%E9%9D%99%E6%80%81%E5%8D%9A%E5%AE%A2%E9%81%87%E5%88%B0%E7%9A%84%E4%B8%A4%E4%B8%AA%E9%97%AE%E9%A2%98/</guid>
      <description>测试hugo静态文档发布后无法渲染的原因 baseURL的设置
在自定义config.toml文件时，一定要设置baseURL值为自己的仓库域名，比如：baseURL = &#39;https://username.github.io/hugo&#39;
hugo -D
刚开始在本地使用hugo server -D ，在浏览器浏览本地静态网页文件时没有问题，但是后来发现这个命令并没有在public目录或者自定义的docs目录下生成静态网页文件。hugo server -D只是启动自带的这个web服务器，在内存中渲染这些文件，并没有真正生成静态网页文件。在编辑好MarkDown文档之后，要使用hugo 或者hugo -D在public目录或者自定义的的docs目录生成静态网页文件，然后再执行
git add .
git commit -m &amp;quot;updates $(date)&amp;quot;
git push origin 也可以把下面这几条命令写在批处理文件中，写完文档后直接运行这个批处理就可以完成发布，稍等使用https://username.github.io/hugo浏览最新发布的博客文章。
1 2 3 4 hugo git add . git commit -m &amp;#34;updates $(date)&amp;#34; git push origin </description>
    </item>
    
    <item>
      <title>在github基于项目GitHub Pages部署hugo博客</title>
      <link>https://lsgxs.github.io/posts/technology/%E5%9C%A8github%E5%9F%BA%E4%BA%8E%E9%A1%B9%E7%9B%AEgithubpages%E9%83%A8%E7%BD%B2hugo%E5%8D%9A%E5%AE%A2/</link>
      <pubDate>Sat, 12 Nov 2022 16:43:00 +0800</pubDate>
      
      <guid>https://lsgxs.github.io/posts/technology/%E5%9C%A8github%E5%9F%BA%E4%BA%8E%E9%A1%B9%E7%9B%AEgithubpages%E9%83%A8%E7%BD%B2hugo%E5%8D%9A%E5%AE%A2/</guid>
      <description>&lt;p&gt;前面有两篇笔记专门记录基于个人或者公司GitHub Pages发布hugo博客站点的方法。这篇笔记记录如何在基于项目的GitHub Pages部署博客站点。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;在github上建立一个项目类型的空白仓库（不要选择readme文件初始化仓库),仓库名称为hugo。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;本地的仓库时现成的.git仓库时，远程的github仓库最好是空仓，操作起来简单。&lt;/li&gt;
&lt;li&gt;如果远程是现成的.git仓库，就直接git clone到本地，然后再添加项目。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;设置main分支的docs作为静态网页发布目录&lt;/p&gt;
&lt;p&gt;关于在static目录下存放资源文件的方法，再专门写一篇文章&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;images/github-pages-docs.png&#34; alt=&#34;&#34;  /&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;参照hugo官网的&lt;a href=&#34;https://gohugo.io/getting-started/quick-start/&#34;&gt;QuickStart&lt;/a&gt;项目步骤，在本地建立hugo博客项目。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>Hugo Quickstart</title>
      <link>https://lsgxs.github.io/posts/technology/hugo-quickstart/</link>
      <pubDate>Tue, 08 Nov 2022 22:19:18 +0800</pubDate>
      
      <guid>https://lsgxs.github.io/posts/technology/hugo-quickstart/</guid>
      <description>Quick Start Create a Hugo site using the beautiful Ananke theme.
This quick start uses macOS in the examples. For instructions about how to install Hugo on other operating systems, see install.
It is required to have Git installed to run this tutorial.
For other approaches to learning Hugo (like books or video tutorials), refer to the external learning resources page.
Step 1: Install Hugo Install the extended version of Hugo (this is required for the current theme used).</description>
    </item>
    
    <item>
      <title>Hugo文档的目录组织结构</title>
      <link>https://lsgxs.github.io/posts/technology/hugo%E6%96%87%E6%A1%A3%E7%9A%84%E7%9B%AE%E5%BD%95%E7%BB%84%E7%BB%87%E7%BB%93%E6%9E%84/</link>
      <pubDate>Wed, 02 Nov 2022 20:42:17 +0800</pubDate>
      
      <guid>https://lsgxs.github.io/posts/technology/hugo%E6%96%87%E6%A1%A3%E7%9A%84%E7%9B%AE%E5%BD%95%E7%BB%84%E7%BB%87%E7%BB%93%E6%9E%84/</guid>
      <description>hugo文档的目录组织结构 在posts目录下直接保存markdow文档 在posts目录下以文档名新建目录，在这新建的目录下新家index.md，新建一个image目录来保存文章引用的图片资源。 因为index.md和image是同一个层级的结构，无论是在front matter区域的featured_image，还是正文区域的图片，都可以直接引用这个同级目录下保存的资源文件。 如下图所示：
也就是以目录的形式来组织文档，不仅层次分明，而且引用的图片也可以得到正确渲染。</description>
    </item>
    
    <item>
      <title>快速安装和使用hugo</title>
      <link>https://lsgxs.github.io/posts/technology/%E5%BF%AB%E9%80%9F%E5%AE%89%E8%A3%85%E5%92%8C%E4%BD%BF%E7%94%A8hugo/</link>
      <pubDate>Tue, 01 Nov 2022 22:32:10 +0800</pubDate>
      
      <guid>https://lsgxs.github.io/posts/technology/%E5%BF%AB%E9%80%9F%E5%AE%89%E8%A3%85%E5%92%8C%E4%BD%BF%E7%94%A8hugo/</guid>
      <description>安装hugo hugo一个快速的博客生成器，只需要下载一个二进制的可执行文件即可。下载后可以保持下面的目录结构：
c:/hugo/bin &amp;ndash;把这个目录的路径添加在Windows的系统path里。 c:/hugo/sites 新建一个hugo 站点
1 2 3 4 5 6 cd sites hugo new site quickstart cd quickstart git init git submodule add https://github.com/theNewDynamic/gohugo-theme-ananke.git themes/ananke -- 修改config.toml文件，添加theme = &amp;#34;theme-name&amp;#34; 新建一个文档
hugo new posts/your-first-post.md &amp;ndash;posts是hugo项目保存marddown文档的目录
1 2 3 4 hugo new posts/以文档的名字作为目录名称-不能包含空格/index.md --真正的markdown文档是index.md ，以目录为核心来组织文档，在index.md的同级目录下建立image目录，保存文档引用的图片。 --用这种方式来组织hugo文档，在渲染文档引用的图片时不易出错。 hugo server -D &amp;ndash;注意这里是大写字母D &amp;ndash;把生成的静态网页文件保存在public目录，然后
​ &amp;ndash;在浏览器用http://localhost:1313可以浏览文档
一般可以采用hugo --cleanDestinationDir 来全新生成博客文档</description>
    </item>
    
    <item>
      <title>Hugo Post中的图像资源引用方法</title>
      <link>https://lsgxs.github.io/posts/technology/hugo-post%E4%B8%AD%E7%9A%84%E5%9B%BE%E5%83%8F%E8%B5%84%E6%BA%90%E5%BC%95%E7%94%A8%E6%96%B9%E6%B3%95/</link>
      <pubDate>Tue, 01 Nov 2022 22:04:29 +0800</pubDate>
      
      <guid>https://lsgxs.github.io/posts/technology/hugo-post%E4%B8%AD%E7%9A%84%E5%9B%BE%E5%83%8F%E8%B5%84%E6%BA%90%E5%BC%95%E7%94%A8%E6%96%B9%E6%B3%95/</guid>
      <description>在hugo的post中如何引用图片 第一个引用图片的位置是在文章的front matter区域，一般使用featured_image: &amp;quot;images/xxx.png&amp;quot;
这个图片默认显示在文章的左边，相当于一个缩略图，装饰作用。
在这个位置显示的图片，如果在static目录下建立images目录保存引用的图片的话，发布到github的username.github.io时，却因为无法找到文件而不能渲染。以文章名字新建目录，然后在这个目录下修改markdown文档的名字为index.md，在同级别的目录下新建一个image目录，用来保存在front matte区域显示的缩略图图片。目录结构如下
1 2 3 4 5 6 1+----Hugo-Post中的图像资源引用方法 以文档的名字作为目录名新建目录 2+----image 3+----冰山.png 2+----index.md 上面的1、2、3代表3个层级,在index.md内用image/冰山.png的格式引用图片，index.md与image目录同级，直接引用就可以了。 hugo new posts/文档的名字-保持目录名字不能有空格/index.md 第二个引用图片的位置是在正文区域，一般使用![](/images/xxx.png)
这个位置引用的图片可以在static目录下新建一个images目录，在images目录下保存要引用的图片。 </description>
    </item>
    
    <item>
      <title>在一台计算机上用git管理多个github账号</title>
      <link>https://lsgxs.github.io/posts/technology/%E5%9C%A8%E4%B8%80%E5%8F%B0%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%B8%8A%E7%94%A8git%E7%AE%A1%E7%90%86%E5%A4%9A%E4%B8%AAgithub%E8%B4%A6%E5%8F%B7/</link>
      <pubDate>Tue, 01 Nov 2022 22:03:27 +0800</pubDate>
      
      <guid>https://lsgxs.github.io/posts/technology/%E5%9C%A8%E4%B8%80%E5%8F%B0%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%B8%8A%E7%94%A8git%E7%AE%A1%E7%90%86%E5%A4%9A%E4%B8%AAgithub%E8%B4%A6%E5%8F%B7/</guid>
      <description>首先取消用户名和邮箱的全局设置
git config --list查看一下全局配置参数列表，如果列表显示里包含自己设置的github登录用户名和邮箱，就使用下面两条命令取消全局配置参数：
git config --global --unset user.name “your-name-for-github”
git config --global --unset user.email &amp;ldquo;your-mailbox-for-github&amp;rdquo;
使用ssh-keygen分别生成多个github账户对应的密钥对
ssh-keygen -t ed25519 -f id_ed25519_hexo -C &amp;quot;mailbox-for-github&amp;quot;
ssh-keygen -t ed25519 -f id_ed25519_hugo -C &amp;quot;mailbox-for-github&amp;quot;
ssh-keygen -t ed25519 -f id_ed25519_tiddlywiki -C &amp;quot;mailbox-for-github&amp;quot;
1 2 3 4 1、 把对应账号的公钥添加在github的settings-&amp;gt;ssh 2、启动ssh-agent添加私钥 eval $(ssh-agent) ssh-add id_xxxxxx --后面的参数是对应的私钥文件名 在~/.ssh目录下新建config文件（没有扩展名的文本文件），内容如下：
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 #first Host hexo HostName github.</description>
    </item>
    
    <item>
      <title>about</title>
      <link>https://lsgxs.github.io/about/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://lsgxs.github.io/about/</guid>
      <description>about</description>
    </item>
    
    
    <item>
      <title>Links</title>
      <link>https://lsgxs.github.io/links/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://lsgxs.github.io/links/</guid>
      <description>links</description>
    </item>
    
    
  </channel>
</rss>
