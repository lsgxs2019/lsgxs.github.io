[{"content":"PaperMod主题config.yml文件的常用参数及设置 paginate : 8 一页显示8个文档\ntheme: PaperMod 主题名称\nShowCodeCopyButtons: 显示代码复制按钮\nUseHogoToc: false 设置为false，可以使用下面两项使用PaperMod自带的toc设置\nshowtoc: true\ntocopen: true\nweight： 决定这篇文章的优先级，可以把经常需要看的置顶，设置为1、2、3等顺序。\nProfileMode:\nenabled : true 设置为true的话，主题显示为profile mode 风格，设置为false为regular常规模式 menu下的main :\nidentifier: archives\nname: archives\nurl: /archives/\nweight: 10\n- identifier: posts\nname: posts\nurl: /posts/\nweight: 10\n- identifier: tags\nname: tags\nurl: /tags/\nweight: 20\n- identifier: search\nname: search\nurl: /search/\nweight: 10\n​ 这里对应的是模板文件：archives、posts、search\n先记录这些，基本可以让博客运行起来，其他的可以再测试。\nFront Matter区域的参数设置 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 itle: \u0026#34;{{ replace .Name \u0026#34;-\u0026#34; \u0026#34; \u0026#34; | title }}\u0026#34; date: {{ .Date }} # weight: 1 # aliases: [\u0026#34;/first\u0026#34;] tags: [\u0026#34;first\u0026#34;,\u0026#34;删除github分支\u0026#34;,\u0026#34;github分支\u0026#34;] author: \u0026#34;Me\u0026#34; # author: [\u0026#34;Me\u0026#34;, \u0026#34;You\u0026#34;] # multiple authors showToc: true TocOpen: true draft: false hidemeta: false comments: false description: \u0026#34;Desc Text.\u0026#34; canonicalURL: \u0026#34;https://canonical.url/to/page\u0026#34; disableHLJS: true # to disable highlightjs disableShare: false disableHLJS: false hideSummary: false searchHidden: true ShowReadingTime: false ShowBreadCrumbs: true ShowPostNavLinks: true ShowWordCount: false ShowRssButtonInSectionTermList: true UseHugoToc: false cover: image: \u0026#34;images/冰山.jpg\u0026#34; # image path/url alt: \u0026#34;\u0026lt;alt text\u0026gt;\u0026#34; # alt text caption: \u0026#34;\u0026lt;text\u0026gt;\u0026#34; # display caption under cover relative: false # when using page bundles set this to true hidden: true # only hide on current single page ","permalink":"https://lsgxs.github.io/posts/technology/hugo/papermod%E5%8F%82%E6%95%B0%E8%AE%BE%E7%BD%AE/","summary":"PaperMod主题config.yml文件的常用参数及设置 paginate : 8 一页显示8个文档\ntheme: PaperMod 主题名称\nShowCodeCopyButtons: 显示代码复制按钮\nUseHogoToc: false 设置为false，可以使用下面两项使用PaperMod自带的toc设置\nshowtoc: true\ntocopen: true\nweight： 决定这篇文章的优先级，可以把经常需要看的置顶，设置为1、2、3等顺序。\nProfileMode:\nenabled : true 设置为true的话，主题显示为profile mode 风格，设置为false为regular常规模式 menu下的main :\nidentifier: archives\nname: archives\nurl: /archives/\nweight: 10\n- identifier: posts\nname: posts\nurl: /posts/\nweight: 10\n- identifier: tags\nname: tags\nurl: /tags/\nweight: 20\n- identifier: search\nname: search\nurl: /search/\nweight: 10\n​ 这里对应的是模板文件：archives、posts、search\n先记录这些，基本可以让博客运行起来，其他的可以再测试。\nFront Matter区域的参数设置 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 itle: \u0026#34;{{ replace .","title":"Papermod参数设置"},{"content":"根据PaperMod的QuickStart记录自己的建站教程 安装hugo\n下载扩展版本的hugo二进制应用，在系统环境变量里设置指向hug.exe的path即可在任意目录下运行hugo。在git-bash terminal下测试安装是否正确：hugo version\n​ 建站\n保持下图所示的目录结构：\ncd site\nhugo new site HuGoPaperMod -f yml (这里用-f yml指定建立yml格式的配置文件)\ncd HugoPaperMod (此时新建的HugoPaperMod项目下有下图所示的目录）：\n在这些目录下只有archetypes目录下有default.md一个文件，作为新建markdown文档的模板，内容如下：\n1 2 3 title: \u0026#34;{{ replace .Name \u0026#34;-\u0026#34; \u0026#34; \u0026#34; | title }}\u0026#34; date: {{ .Date }} draft: true 1 2 3 4 git init (先初始化当前的站点项目目录，否则下边的git submodule add 不能执行) git submodule add --depth=1 https://github.com/adityatelange/hugo-PaperMod.git themes/PaperMod （--depth=1指定只下载gitchub仓库最近的一次提交，不包括更多的历史提交记录） git submodule update --init --recursive (needed when you reclone your repo,submodules may not get cloned automatically) 到这里已经把PaperMod主题下载到themes目录下，如果提示`unable to access...`类似的错误信息，就多试几次，可能是因为https协议没有ssh协议稳定。 在config.yml文件里添加theme : \u0026quot;PaperMod\u0026quot;。\n此时进入themes/PaperMode目录，如下图所示：\n关键的一步：把PaperMod主题文件夹里面的的一些静态文件和配置文件复制到站点目录下，目的是为了可以自定义博客的样式，而不会改动主题文件夹里的样式，当引用的PaperMod主题有更新的时候，直接在主题目录下git pull就可以，站点目录的修改会优先覆盖主题里的配置，可以实现平滑更新。\n这段文字来自网友的博客文章，是这段文字让我找到了一个问题：我是直接在themes/PaperMod下自定义部分样式文件(主要是layout目录里面的部分html文件和assets目录里面css文件),没有把这些需要自定义的模板等样式文件复制到博客项目根目录下再自定义，结果导致再本地使用hugo server 、localhost:1313时正常渲染出自定义效果，推送到github仓库浏览时却没有实现自定义效果。网友的回复是，hugo 在编译时会先使用项目根目录下的样式文件，如果没有的话才会到引用的主题下搜索这些样式文件，所以才会导致推送到github时引用的是原PaperMode仓库的样式文件。**所以下载完毕主题并添加配置文件后，把themes/papermod目录下的静态文件复制到项目根目录下覆盖原文件，然后根据需要进行自定义。**这里自定义实现的网页博客的样式，在PaperMod每个文档右侧以缩略图的形式显示cover image，个人挺喜欢这种小巧的样式。经过多次修改终于实现了这个效果，感谢网友分享的的文章。\n自定义cover image的网友文章链接：Hugo博客文章封面图片缩小并移到侧边 | PaperMod主题\n","permalink":"https://lsgxs.github.io/posts/technology/mypapermodqucikstart/","summary":"根据PaperMod的QuickStart记录自己的建站教程 安装hugo\n下载扩展版本的hugo二进制应用，在系统环境变量里设置指向hug.exe的path即可在任意目录下运行hugo。在git-bash terminal下测试安装是否正确：hugo version\n​ 建站\n保持下图所示的目录结构：\ncd site\nhugo new site HuGoPaperMod -f yml (这里用-f yml指定建立yml格式的配置文件)\ncd HugoPaperMod (此时新建的HugoPaperMod项目下有下图所示的目录）：\n在这些目录下只有archetypes目录下有default.md一个文件，作为新建markdown文档的模板，内容如下：\n1 2 3 title: \u0026#34;{{ replace .Name \u0026#34;-\u0026#34; \u0026#34; \u0026#34; | title }}\u0026#34; date: {{ .Date }} draft: true 1 2 3 4 git init (先初始化当前的站点项目目录，否则下边的git submodule add 不能执行) git submodule add --depth=1 https://github.com/adityatelange/hugo-PaperMod.git themes/PaperMod （--depth=1指定只下载gitchub仓库最近的一次提交，不包括更多的历史提交记录） git submodule update --init --recursive (needed when you reclone your repo,submodules may not get cloned automatically) 到这里已经把PaperMod主题下载到themes目录下，如果提示`unable to access.","title":"MyPaperModQucikStart"},{"content":"2022年11月阅读计划 Professional JavaScript for web Developer\n目前才看到103页，加油。没有硬性指标，每天看多少页，但是每天都要看。\n2022年12月阅读计划 ","permalink":"https://lsgxs.github.io/posts/read/%E9%98%85%E8%AF%BB%E8%AE%A1%E5%88%92/","summary":"2022年11月阅读计划 Professional JavaScript for web Developer\n目前才看到103页，加油。没有硬性指标，每天看多少页，但是每天都要看。\n2022年12月阅读计划 ","title":"阅读计划"},{"content":"不要和任何人讨论股票 不要和任何人谈论股票，因为这个市场是只有小于10%以内的人可能会盈利，而这些10%的人有多少愿意和你分享盈利的策略呢？实力需要自己慢慢学习和实践。\n","permalink":"https://lsgxs.github.io/posts/stock/%E4%B8%8D%E8%A6%81%E5%92%8C%E4%BB%BB%E4%BD%95%E4%BA%BA%E8%AE%A8%E8%AE%BA%E8%82%A1%E7%A5%A8/","summary":"不要和任何人讨论股票 不要和任何人谈论股票，因为这个市场是只有小于10%以内的人可能会盈利，而这些10%的人有多少愿意和你分享盈利的策略呢？实力需要自己慢慢学习和实践。","title":"不要和任何人讨论股票"},{"content":"使用git clone 、git submoudle、downlaod github repository下载themes git clone git submodule add download github repository ","permalink":"https://lsgxs.github.io/posts/technology/difference-between-git-clone-submoudule-downlaod/","summary":"使用git clone 、git submoudle、downlaod github repository下载themes git clone git submodule add download github repository ","title":"Difference Between Git Clone Submoudule Downlaod"},{"content":"Hugo Page Resource这段内容来自hugo官方文档 Image Resources To process an image, you must access the image as either a page resource or a global resource.\nPage Resources A page resource is a file within a page bundle. A page bundle is a directory with an index.md or _index.md file at its root.\n1 2 3 4 5 content/ └── posts/ └── post-1/ \u0026lt;-- page bundle ├── index.md └── sunset.jpg \u0026lt;-- page resource Global Resources A global resource is a file:\nWithin the assets directory, or Within any directory mounted to the assets directory, or Located on a remote server accessible via http or https 1 2 3 assets/ └── images/ └── sunset.jpg \u0026lt;-- global resource To access a local image as a global resource:\n1 {{ $image := resources.Get \u0026#34;images/sunset.jpg\u0026#34; }} To access a remote image as a global resource:\n","permalink":"https://lsgxs.github.io/posts/technology/hugo/pagebundle/","summary":"Hugo Page Resource这段内容来自hugo官方文档 Image Resources To process an image, you must access the image as either a page resource or a global resource.\nPage Resources A page resource is a file within a page bundle. A page bundle is a directory with an index.md or _index.md file at its root.\n1 2 3 4 5 content/ └── posts/ └── post-1/ \u0026lt;-- page bundle ├── index.md └── sunset.jpg \u0026lt;-- page resource Global Resources A global resource is a file:","title":"page bundle"},{"content":"关于Themes中自带ExampleSite的使用方法 学习一个新的hugo博客站点主题，可以使用主题中自带的ExampleSite站点 1 2 3 4 5 6 7 8 $ mkdir your-site $ cd your-site $ mkdir themes $ cd themes $ git clone https://github.com/repository-url.git $ cp -r themes-name/exampleSite/** ../ --把ExampleSite站点目录下的所有内容复制到你的站点根目录 $ cd .. $ hugo serve 如果你的站点已经是一个git 仓库项目了，可以使用git submoudle 的方法添加这个主题。 1 2 3 git submodule add https://github.com/repository-name themes/theme-name hugo serve -t hugo-theme-name http://localhost:1313 ","permalink":"https://lsgxs.github.io/posts/technology/examplesite/","summary":"关于Themes中自带ExampleSite的使用方法 学习一个新的hugo博客站点主题，可以使用主题中自带的ExampleSite站点 1 2 3 4 5 6 7 8 $ mkdir your-site $ cd your-site $ mkdir themes $ cd themes $ git clone https://github.com/repository-url.git $ cp -r themes-name/exampleSite/** ../ --把ExampleSite站点目录下的所有内容复制到你的站点根目录 $ cd .. $ hugo serve 如果你的站点已经是一个git 仓库项目了，可以使用git submoudle 的方法添加这个主题。 1 2 3 git submodule add https://github.com/repository-name themes/theme-name hugo serve -t hugo-theme-name http://localhost:1313 ","title":"ExampleSite"},{"content":"使用自定义的actons workflow,在仓库的两个分支之间实现hugo博客站点自动化部署 用仓库的main分支保存博客项目源文件，用仓库的另外一个手动建立的独立分支gh-pages保存编译后的静态文件。这里依然以username.github.io形式的仓库为例。自己手动建立独立的gh-pages分支。\n在github上新建username.github.io形式的空仓\n在本地根据hugo官网推荐的QuickStart入门教程，建立Hugo博客项目\n1 2 3 4 5 6 7 8 9 10 hugo new site hugo cd hugo git init git submodule add https://github.com/theNewDynamic/gohugo-theme-ananke.git themes/ananke 编辑config.toml文件，在最后新增 theme = \u0026#34;ananke\u0026#34; 修改baseURL = \u0026#34;https://username.github.io\u0026#34; hugo new posts/文档名称作为目录名/index.md --编辑自己的文档 git add . git commit -m \u0026#34;新增文档\u0026#34; git push -u origin main --第一次推送到空仓username.github.io时要带上-u参数，以后不需要带-u参数 在本地新建一个独立分支gh-pages\n1 2 3 4 5 6 git checkout --orphan gh-pages echo \u0026#34;hello github gh-pages\u0026#34; \u0026gt; readme.md git add . git commit -m \u0026#34;add gh-pages branch\u0026#34; git push origin gh-pages --在新建分支后推送到远程仓库分支，要指定源分支，系统会自动建立同名分支，并建立关联。以后再推送分支可以不必再指定源分支。 git branch -a --此时就可以看到新建的独立分支gh-pages。如果不在新建的分支下增加变化并git-add-commit-push ，就不会真正建立分支。 经过上面两个步骤，username.githbu.io仓库有两个分支：main 、gh-pages。建立并切换到gh-pages分支时，会自动复制main分支的目录和文件，除了.git目录之外，把所有其他目录和文件都删除，然后git-add-commit-push，远程仓库的gh-pages没有别的文件，只用来保存静态的博客站点网页文件。\n设置仓库的Action secrets和Deploy Key\n这里使用action secrets和deploy_key 的方式部署 hugo 到 github pages 上。使用 deploy_key之前，需要先生成一对 ssh key 密钥，在源文件仓库（执行 Github Actions 的仓库）设置私钥，发布仓库（Github Pages 所在仓库）配置公钥。这里使用的是一个仓库的不同分支，公私和私钥都在这一个仓库设置。\n选择仓库，选择Settings-\u0026gt;Deploy Keys-\u0026gt;Add deploy key，贴上 ssh 公钥，勾选 Allow write access 选项。\n选择Settings-\u0026gt;Secrets-\u0026gt;New repository secret，Name 填 HUGO_DEPLOY_KEY，Value 贴上 ssh 私钥。\n在博客项目根目录下建立一个actions workflow文件(如果新建.github目录时提示不能建立，就从别处复制一个)，路径为：.github/workflows/hugo.yml ,文件内容如下：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 name: github pages on: push: branches: - main jobs: deploy: runs-on: ubuntu-18.04 steps: - uses: actions/checkout@v2 with: submodules: true # Fetch Hugo themes (true OR recursive) fetch-depth: 0 # Fetch all history for .GitInfo and .Lastmod - name: Setup Hugo uses: peaceiris/actions-hugo@v2 with: hugo-version: \u0026#39;0.79.1\u0026#39; # extended: true - name: Build run: hugo --minify - name: Deploy uses: peaceiris/actions-gh-pages@v3 with: # github_token: ${{ secrets.GITHUB_TOKEN }} deploy_key: ${{ secrets.HUGO_DEPLOY_KEY }} publish_dir: ./public 最后推送整个博客项目到username.github.io仓库的main分支，github后台会自动运行上面的actions workflows文件，完成博客项目静态站点网页部署。由于已经使用了github推荐的hugo action，可以正确的自动化发布博客项目，所有这个workflows就没有再实际测试，记录在这里备忘，以后有兴趣的可以再尝试。\n","permalink":"https://lsgxs.github.io/posts/technology/%E5%9C%A8github%E5%9F%BA%E4%BA%8E%E4%B8%AA%E4%BA%BA%E6%88%96%E5%85%AC%E5%8F%B8githubpages%E9%83%A8%E7%BD%B2hugo%E5%8D%9A%E5%AE%A2%E4%B9%8B%E4%BA%8C/","summary":"使用自定义的actons workflow,在仓库的两个分支之间实现hugo博客站点自动化部署 用仓库的main分支保存博客项目源文件，用仓库的另外一个手动建立的独立分支gh-pages保存编译后的静态文件。这里依然以username.github.io形式的仓库为例。自己手动建立独立的gh-pages分支。\n在github上新建username.github.io形式的空仓\n在本地根据hugo官网推荐的QuickStart入门教程，建立Hugo博客项目\n1 2 3 4 5 6 7 8 9 10 hugo new site hugo cd hugo git init git submodule add https://github.com/theNewDynamic/gohugo-theme-ananke.git themes/ananke 编辑config.toml文件，在最后新增 theme = \u0026#34;ananke\u0026#34; 修改baseURL = \u0026#34;https://username.github.io\u0026#34; hugo new posts/文档名称作为目录名/index.md --编辑自己的文档 git add . git commit -m \u0026#34;新增文档\u0026#34; git push -u origin main --第一次推送到空仓username.github.io时要带上-u参数，以后不需要带-u参数 在本地新建一个独立分支gh-pages\n1 2 3 4 5 6 git checkout --orphan gh-pages echo \u0026#34;hello github gh-pages\u0026#34; \u0026gt; readme.md git add .","title":"在github基于个人或公司GitHub Pages部署hugo博客之二"},{"content":"使用github推荐的hugo actions workflow自动化部署hugo博客站点 前一篇文章记录了手动模式推送hugo博客站点到github,采用的是基于项目的仓库，采用username/hugo.git的形式建立仓库，在项目根目录下建立docs目录，把静态博客站点发布在main分支的docs目录。\n这篇记录一下基于个人的仓库，采用的是username.github.io形式的仓库。\n新建username.github.io的空仓\n根据hugo官网推荐的QuickStart入门教程，建立Hugo博客项目\n1 2 3 4 5 6 7 8 9 10 hugo new site hugo cd hugo git init git submodule add https://github.com/theNewDynamic/gohugo-theme-ananke.git themes/ananke 编辑config.toml文件，在最后新增 theme = \u0026#34;ananke\u0026#34; 修改baseURL = \u0026#34;https://username.github.io\u0026#34; hugo new posts/文档名称作为目录名/index.md --编辑自己的文档 git add . git commit -m \u0026#34;新增文档\u0026#34; git push -u origin main --第一次推送到空仓username.github.io时要带上-u参数，以后不需要带-u参数 新建actions实现自动发布静态站点\ngithub pages自带actions操作方法：进入该仓库，选择settings-pages,在Build and Deployment 的Source部分选择GitHub Actions，直接进入hugo.yml编辑界面，直接点击右侧的commit就可以在仓库新建hugo.yml文件，路径是.github\\workflows\\hugo.yml，什么有没有修改，可以实现自动发布。 很神奇，在username.github.io仓库的actions下采用了github推荐的hugo站点actions workflow，点击commit后在项目的根目录下新建了hugo.yml文件，新增博客文档后，git-add-commit-push 之后，显示deploy successful，使用https://username.github.io，居然可以正确的显示最新发布的文章，也就是说，什么也没有配置，直接可以发布成功，而且没有用到自己手动建立的gh-pages分支。 我很好奇，怎么实现的呢？那么多参数，不太明白具体的作用，慢慢来^-^ hugo.yml\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 # Sample workflow for building and deploying a Hugo site to GitHub Pages name: Deploy Hugo site to Pages on: # Runs on pushes targeting the default branch push: branches: [\u0026#34;main\u0026#34;] # Allows you to run this workflow manually from the Actions tab workflow_dispatch: # Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages permissions: contents: read pages: write id-token: write # Allow one concurrent deployment concurrency: group: \u0026#34;pages\u0026#34; cancel-in-progress: true # Default to bash defaults: run: shell: bash jobs: # Build job build: runs-on: ubuntu-latest env: HUGO_VERSION: 0.102.3 steps: - name: Install Hugo CLI run: | wget -O ${{ runner.temp }}/hugo.deb https://github.com/gohugoio/hugo/releases/download/v${HUGO_VERSION}/hugo_extended_${HUGO_VERSION}_Linux-64bit.deb \\ \u0026amp;\u0026amp; sudo dpkg -i ${{ runner.temp }}/hugo.deb - name: Checkout uses: actions/checkout@v3 with: submodules: recursive - name: Setup Pages id: pages uses: actions/configure-pages@v2 - name: Build with Hugo env: # For maximum backward compatibility with Hugo modules HUGO_ENVIRONMENT: production HUGO_ENV: production run: | hugo \\ --minify \\ --baseURL \u0026#34;${{ steps.pages.outputs.base_url }}/\u0026#34; - name: Upload artifact uses: actions/upload-pages-artifact@v1 with: path: ./public # Deployment job deploy: environment: name: github-pages url: ${{ steps.deployment.outputs.page_url }} runs-on: ubuntu-latest needs: build steps: - name: Deploy to GitHub Pages id: deployment uses: actions/deploy-pages@v1 点击仓库的actions显示All workflows，选择一个workflows,会在窗口的最下面显示一个artifact,终于看到了熟悉的gh-pages: 也就是说这个gh-pages是由系统自己创建的，在这个模式下不需要自己手动建立gh-pages，如果需要指自定义actions，就需要自己建立gh-pages分支发布静态站点文件。\nAbout publishing sources\nAbout publishing sources\n1 2 3 4 You can publish your site when changes are pushed to a specific branch, or you can write a GitHub Actions workflow to publish your site. If you do not need any control over the build process for your site, we recommend that you publish your site when changes are pushed to a specific branch. You can specify which branch and folder to use as your publishing source. The source branch can be any branch in your repository, and the source folder can either be the root of the repository (/) on the source branch or a /docs folder on the source branch. Whenever changes are pushed to the source branch, the changes in the source folder will be published to your GitHub Pages site. If you want to use a build process other than Jekyll or you do not want a dedicated branch to hold your compiled static files, we recommend that you write a GitHub Actions workflow to publish your site. GitHub provides starter workflows for common publishing scenarios to help you write your workflow. 看完Github Docs上关于为github pages 站点配置发布源的解释就明白了，如果你不需要单独的分支来保存编译后的静态文件、或者你不想使用github后台的编译处理过程，推荐你自己编写GitHub Actions workflow来发布你的站点。读到这里，我就把自己手动建立的gh-pages删除了。剩下的就是慢慢研究这个github推荐的hugo.yml文件的实现细节了。当然，也可以使用单独的gh-pags分支，用仓库的secrets.deploy-token来自定义发布过程，实现同样的效果。\n","permalink":"https://lsgxs.github.io/posts/technology/%E5%9C%A8github%E5%9F%BA%E4%BA%8E%E4%B8%AA%E4%BA%BA%E6%88%96%E5%85%AC%E5%8F%B8githubpages%E9%83%A8%E7%BD%B2hugo%E5%8D%9A%E5%AE%A2%E4%B9%8B%E4%B8%80/","summary":"使用github推荐的hugo actions workflow自动化部署hugo博客站点 前一篇文章记录了手动模式推送hugo博客站点到github,采用的是基于项目的仓库，采用username/hugo.git的形式建立仓库，在项目根目录下建立docs目录，把静态博客站点发布在main分支的docs目录。\n这篇记录一下基于个人的仓库，采用的是username.github.io形式的仓库。\n新建username.github.io的空仓\n根据hugo官网推荐的QuickStart入门教程，建立Hugo博客项目\n1 2 3 4 5 6 7 8 9 10 hugo new site hugo cd hugo git init git submodule add https://github.com/theNewDynamic/gohugo-theme-ananke.git themes/ananke 编辑config.toml文件，在最后新增 theme = \u0026#34;ananke\u0026#34; 修改baseURL = \u0026#34;https://username.github.io\u0026#34; hugo new posts/文档名称作为目录名/index.md --编辑自己的文档 git add . git commit -m \u0026#34;新增文档\u0026#34; git push -u origin main --第一次推送到空仓username.github.io时要带上-u参数，以后不需要带-u参数 新建actions实现自动发布静态站点\ngithub pages自带actions操作方法：进入该仓库，选择settings-pages,在Build and Deployment 的Source部分选择GitHub Actions，直接进入hugo.yml编辑界面，直接点击右侧的commit就可以在仓库新建hugo.yml文件，路径是.github\\workflows\\hugo.yml，什么有没有修改，可以实现自动发布。 很神奇，在username.github.io仓库的actions下采用了github推荐的hugo站点actions workflow，点击commit后在项目的根目录下新建了hugo.yml文件，新增博客文档后，git-add-commit-push 之后，显示deploy successful，使用https://username.github.io，居然可以正确的显示最新发布的文章，也就是说，什么也没有配置，直接可以发布成功，而且没有用到自己手动建立的gh-pages分支。 我很好奇，怎么实现的呢？那么多参数，不太明白具体的作用，慢慢来^-^ hugo.yml\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 # Sample workflow for building and deploying a Hugo site to GitHub Pages name: Deploy Hugo site to Pages on: # Runs on pushes targeting the default branch push: branches: [\u0026#34;main\u0026#34;] # Allows you to run this workflow manually from the Actions tab workflow_dispatch: # Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages permissions: contents: read pages: write id-token: write # Allow one concurrent deployment concurrency: group: \u0026#34;pages\u0026#34; cancel-in-progress: true # Default to bash defaults: run: shell: bash jobs: # Build job build: runs-on: ubuntu-latest env: HUGO_VERSION: 0.","title":"在github基于个人或公司GitHub Pages部署hugo博客之一"},{"content":"最近使用hexo 和hugo两种静态站点框架在github上部署博客，总结一下有三种常用的部署方式：\n在两个不同的仓库之间使用githbu actions flow自动化部署站点 一个仓库作为博客项目源文件的存储空间 另外一个仓库作为博客项目生成的静态文件发布源 具体的实现可以参照自己hexo博客的部署项目源文件 在一个仓库的两个不同分支之间部署博客站点 首先要建立一个username.github.io的仓库，在main分支保存博客项目源文件。 其次是在本地建立一个独立分支gh-pages，用这个分支来发布生成的静态网页文件 利用github基于项目的github pages服务 在仓库的main分支保存博客项目源文件 在项目的根目录下建立docs目录，并修改config.toml文件，在文件末尾添加publish = \u0026ldquo;docs\u0026quot;的数据项。github项目仓库默认使用docs作为静态站点发布源，替代了public目录的作用，可以删除public目录。 也就是说在一个仓库的main分支下保存源文件，同时把项目根目录的docs目录作为静态站点发布源。 ","permalink":"https://lsgxs.github.io/posts/technology/%E5%9C%A8github%E9%83%A8%E7%BD%B2%E9%9D%99%E6%80%81%E5%8D%9A%E5%AE%A2%E7%AB%99%E7%82%B9%E7%9A%84%E4%B8%89%E7%A7%8D%E6%96%B9%E5%BC%8F/","summary":"最近使用hexo 和hugo两种静态站点框架在github上部署博客，总结一下有三种常用的部署方式：\n在两个不同的仓库之间使用githbu actions flow自动化部署站点 一个仓库作为博客项目源文件的存储空间 另外一个仓库作为博客项目生成的静态文件发布源 具体的实现可以参照自己hexo博客的部署项目源文件 在一个仓库的两个不同分支之间部署博客站点 首先要建立一个username.github.io的仓库，在main分支保存博客项目源文件。 其次是在本地建立一个独立分支gh-pages，用这个分支来发布生成的静态网页文件 利用github基于项目的github pages服务 在仓库的main分支保存博客项目源文件 在项目的根目录下建立docs目录，并修改config.toml文件，在文件末尾添加publish = \u0026ldquo;docs\u0026quot;的数据项。github项目仓库默认使用docs作为静态站点发布源，替代了public目录的作用，可以删除public目录。 也就是说在一个仓库的main分支下保存源文件，同时把项目根目录的docs目录作为静态站点发布源。 ","title":"在github部署静态博客站点的三种方式"},{"content":"使用github的actions workflow把hugo博客自动化部署到github 部署静态博客站点到github一般有两种方法，第一种是手动建立项目，添加文档，最后使用git命令部署到github仓库。第二种方法是使用github提供的actions flow实现自动化部署，一般可以通过两个分支来实现。\n一个分支保存项目源文件、\n一般为main分支，把项目的源文件推送到这个分支，既可以保存源文件，又可以从这里开始执行自动化部署到本仓库的另外一个分支。\n手动建立一个独立的gh-pages分支\n1 2 3 4 5 6 7 8 git checkout --orphan gh-pages echo \u0026#34;hello gh-pages\u0026#34; \u0026gt; readme.md git add . git commit -m \u0026#34;udpate with orphan branch gh-pages\u0026#34; git push origin gh-pages git branch -a --经过上面的创建新的独立分支到最后的提交、推送，到这里才可以看到这个新建的分支 -- 然后可以把gh-pages分支下除了.git目录之外的所有目录和文件删除，推送到远程，专门来保存自动部署生成的静态站点文件 -- 当然可以试一下不必手动删除这些目录和文件，看看系统是不是会自动清理删除这些目录和文件。 编写actions自动部署脚本\n首先在项目的根目录下新建脚本文件：.github\\workflows\\hugo-actions.yml。如果提示不能新建.开头的目录，就从别的地方复制过来，编辑一下路径和文件名。 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 name: Deploy Hugo on: push: branches: - main jobs: build-deploy: runs-on: ubuntu-18.04 steps: - uses: actions/checkout@v1 - name: Setup Hugo uses: peaceiris/actions-hugo@v2 with: hugo-version: latest - name: Build run: hugo - name: Deploy uses: peaceiris/actions-gh-pages@v3 with: personal_token: ${{ secrets.HUGODEPLOYBTTWOBRANCHS }} PUBLISH_BRANCH: gh-pages PUBLISH_DIR: ./public commit_message: ${{ github.event.head_commit.message }} personnal access token和secrets\n在上面的脚本Deploy部分，HUGODEPLOYBTTWOBRANCHS是在github的账户setting-\u0026gt;developer setting 下面新建的personal access token: 进入到hugo 项目仓库，然后选择secrets，新建仓库的secrets，填写名称，secret的内容是上一步新建的personal access token的内容，粘贴在这里保存即可，在action脚本里引用时，用${{ secrets.HUGODEPLOYBTTWOBRANCHS }}的写法就可以获取token的值。\n也就是说，仓库的secrets读取的是github账号级别的personal access token。\n","permalink":"https://lsgxs.github.io/posts/technology/hugo%E8%87%AA%E5%8A%A8%E5%8C%96%E9%83%A8%E7%BD%B2%E5%88%B0github/","summary":"使用github的actions workflow把hugo博客自动化部署到github 部署静态博客站点到github一般有两种方法，第一种是手动建立项目，添加文档，最后使用git命令部署到github仓库。第二种方法是使用github提供的actions flow实现自动化部署，一般可以通过两个分支来实现。\n一个分支保存项目源文件、\n一般为main分支，把项目的源文件推送到这个分支，既可以保存源文件，又可以从这里开始执行自动化部署到本仓库的另外一个分支。\n手动建立一个独立的gh-pages分支\n1 2 3 4 5 6 7 8 git checkout --orphan gh-pages echo \u0026#34;hello gh-pages\u0026#34; \u0026gt; readme.md git add . git commit -m \u0026#34;udpate with orphan branch gh-pages\u0026#34; git push origin gh-pages git branch -a --经过上面的创建新的独立分支到最后的提交、推送，到这里才可以看到这个新建的分支 -- 然后可以把gh-pages分支下除了.git目录之外的所有目录和文件删除，推送到远程，专门来保存自动部署生成的静态站点文件 -- 当然可以试一下不必手动删除这些目录和文件，看看系统是不是会自动清理删除这些目录和文件。 编写actions自动部署脚本\n首先在项目的根目录下新建脚本文件：.github\\workflows\\hugo-actions.yml。如果提示不能新建.开头的目录，就从别的地方复制过来，编辑一下路径和文件名。 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 name: Deploy Hugo on: push: branches: - main jobs: build-deploy: runs-on: ubuntu-18.","title":"Hugo自动化部署到github"},{"content":"测试hugo静态文档发布后无法渲染的原因 baseURL的设置\n在自定义config.toml文件时，一定要设置baseURL值为自己的仓库域名，比如：baseURL = 'https://username.github.io/hugo'\nhugo -D\n刚开始在本地使用hugo server -D ，在浏览器浏览本地静态网页文件时没有问题，但是后来发现这个命令并没有在public目录或者自定义的docs目录下生成静态网页文件。hugo server -D只是启动自带的这个web服务器，在内存中渲染这些文件，并没有真正生成静态网页文件。在编辑好MarkDown文档之后，要使用hugo 或者hugo -D在public目录或者自定义的的docs目录生成静态网页文件，然后再执行\ngit add .\ngit commit -m \u0026quot;updates $(date)\u0026quot;\ngit push origin 也可以把下面这几条命令写在批处理文件中，写完文档后直接运行这个批处理就可以完成发布，稍等使用https://username.github.io/hugo浏览最新发布的博客文章。\n1 2 3 4 hugo git add . git commit -m \u0026#34;updates $(date)\u0026#34; git push origin ","permalink":"https://lsgxs.github.io/posts/technology/%E4%BD%BF%E7%94%A8hugo%E5%9C%A8githubpages%E4%B8%8A%E5%8F%91%E5%B8%83%E9%9D%99%E6%80%81%E5%8D%9A%E5%AE%A2%E9%81%87%E5%88%B0%E7%9A%84%E4%B8%A4%E4%B8%AA%E9%97%AE%E9%A2%98/","summary":"测试hugo静态文档发布后无法渲染的原因 baseURL的设置\n在自定义config.toml文件时，一定要设置baseURL值为自己的仓库域名，比如：baseURL = 'https://username.github.io/hugo'\nhugo -D\n刚开始在本地使用hugo server -D ，在浏览器浏览本地静态网页文件时没有问题，但是后来发现这个命令并没有在public目录或者自定义的docs目录下生成静态网页文件。hugo server -D只是启动自带的这个web服务器，在内存中渲染这些文件，并没有真正生成静态网页文件。在编辑好MarkDown文档之后，要使用hugo 或者hugo -D在public目录或者自定义的的docs目录生成静态网页文件，然后再执行\ngit add .\ngit commit -m \u0026quot;updates $(date)\u0026quot;\ngit push origin 也可以把下面这几条命令写在批处理文件中，写完文档后直接运行这个批处理就可以完成发布，稍等使用https://username.github.io/hugo浏览最新发布的博客文章。\n1 2 3 4 hugo git add . git commit -m \u0026#34;updates $(date)\u0026#34; git push origin ","title":"测试hugo渲染"},{"content":"前面有两篇笔记专门记录基于个人或者公司GitHub Pages发布hugo博客站点的方法。这篇笔记记录如何在基于项目的GitHub Pages部署博客站点。\n在github上建立一个项目类型的空白仓库（不要选择readme文件初始化仓库),仓库名称为hugo。\n本地的仓库时现成的.git仓库时，远程的github仓库最好是空仓，操作起来简单。 如果远程是现成的.git仓库，就直接git clone到本地，然后再添加项目。 设置main分支的docs作为静态网页发布目录\n关于在static目录下存放资源文件的方法，再专门写一篇文章\n参照hugo官网的QuickStart项目步骤，在本地建立hugo博客项目。\n1 2 3 4 5 6 hugo new site hugo cd hugo git init git submodule add https://github.com/theNewDynamic/gohugo-theme-ananke.git themes/ananke --编辑项目根目录下的config.toml文件，在最后添加theme数据项 theme = \u0026#34;ananke\u0026#34; 添加一些文档\n1 2 3 4 hugo new posts/quickstart/index.md --这里采用的是文档名作为目录，在目录下面把文档名称修改为index.md的文档结构 --如果文档不需要引用图片，就可以采用hugo默认的文档结构： hugo new posts/my-first-post.md --直接在posts目录生成.md的文档。 新建docs目录\n编辑hugo项目根目录的config.toml文件，添加下面的数据项\npublishdir = \u0026ldquo;docs\u0026rdquo; # 将生成的静态页面文件夹设置到 docs 下 编译文档并在本地发布浏览\n1 2 3 4 5 6 7 8 hugo server -D --经试验发现hugo server 只是在内存中渲染这些文件，通过自带的web服务器显示这些文件，并没有在指定的 --docs目录下生成静态网页文件。 --要正式生成静态网页文件，需要单独使用hugo或者 hugo -D ,参数-D 是包含draft参数为真的文档也会生成 --静态文件 http://localhost:1313 --默认是这个端口，有时候要看server随机分配的端口 --在发布到github时，必须要设置编辑config.toml文件，设置baseURL数据项，比如： --baseURL = \u0026#39;https://username.github.io/hugo\u0026#39; --如果不设置这个数据项的话，静态文件不能被正常渲染 1 经过自定义发布目录的设置，原来默认生成在public目录下的文件，现在会保存在docs目录下。推送到github项目仓库的main分支后，就可以使用https://username.github.io/hugo访问博客，这就是基于项目的pages使用方法。 最后推送到github的hugo仓库main分支 git add . git commit -m \u0026ldquo;updae $(date)\u0026rdquo; git push origin main https://username.github.io/hugo 下面的步骤介绍如何使用单独的gh-pages分支保存发布的静态网页文件。如果不使用单独的分支来保存静态网页文件，就要设定发布源为Github Actions,如下图所示 建立独立的分支gh-pages,用来保存发布的静态网页文件\ngit checkout --orphan gh-pages\n修改一下readme文件的内容，让下一步可以提交和推送\ngit add .\ngit commit -m \u0026ldquo;changes readme\u0026rdquo;\ngit push -u origin gh-pages 第一次推送到远程需要指定本地分支，默认新建同名的远程分支\ngit branch -a 此时就可以查看到刚刚新建的独立分支，如果不修改和添加、提交、推送就看不到新建的分支\n在多分支下使用hugo server -D生成public目录时，有时候需要先切换到其他分支，然后再切换回来才能看到生成的public目录及其下面的文件。\n在新建独立分支gh-pages时，会复制项目的main分支下的内容，gh-pages是用来发布编译后的静态网页文件的，所有这里要删除.git目录之外的所有的内容，然后再次推送到github：\ngit add . git commit -m \u0026ldquo;delete file in gh-pages copied from main branch of hugo\u0026rdquo; git push origin gh-pages 此时就把gh-pages分支下的所有内容删除了，将来就可以保存发布的静态网页文件。 在多分支仓库推送到远程时，第一次写出具体的本地分支和远程分支对应关系，以后推送就不用了，直接简写: git push origin 就可以。 ","permalink":"https://lsgxs.github.io/posts/technology/%E5%9C%A8github%E5%9F%BA%E4%BA%8E%E9%A1%B9%E7%9B%AEgithubpages%E9%83%A8%E7%BD%B2hugo%E5%8D%9A%E5%AE%A2/","summary":"\u003cp\u003e前面有两篇笔记专门记录基于个人或者公司GitHub Pages发布hugo博客站点的方法。这篇笔记记录如何在基于项目的GitHub Pages部署博客站点。\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003e在github上建立一个项目类型的空白仓库（不要选择readme文件初始化仓库),仓库名称为hugo。\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e本地的仓库时现成的.git仓库时，远程的github仓库最好是空仓，操作起来简单。\u003c/li\u003e\n\u003cli\u003e如果远程是现成的.git仓库，就直接git clone到本地，然后再添加项目。\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e设置main分支的docs作为静态网页发布目录\u003c/p\u003e\n\u003cp\u003e关于在static目录下存放资源文件的方法，再专门写一篇文章\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"images/github-pages-docs.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e参照hugo官网的\u003ca href=\"https://gohugo.io/getting-started/quick-start/\"\u003eQuickStart\u003c/a\u003e项目步骤，在本地建立hugo博客项目。\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ul\u003e","title":"在github基于项目GitHub Pages部署hugo博客"},{"content":"Quick Start Create a Hugo site using the beautiful Ananke theme.\nThis quick start uses macOS in the examples. For instructions about how to install Hugo on other operating systems, see install.\nIt is required to have Git installed to run this tutorial.\nFor other approaches to learning Hugo (like books or video tutorials), refer to the external learning resources page.\nStep 1: Install Hugo Install the extended version of Hugo (this is required for the current theme used).\nHomebrew and MacPorts, package managers for macOS, can be installed from brew.sh or macports.org respectively. See install if you are running Windows etc.\n1 2 3 brew install hugo # or port install hugo To verify your new install:\n1 2 hugo version # Example output: hugo v0.104.2+extended darwin/amd64 BuildDate=unknown It should state that it is extended. If it does not, uninstall it and try another installation method.\nStep 2: Create a New Site 1 hugo new site quickstart The above will create a new Hugo site in a folder named quickstart.\nStep 3: Add a Theme See themes.gohugo.io for a list of themes to consider. This quickstart uses the beautiful Ananke theme.\nFirst, download the theme from GitHub and add it to your site’s themes directory:\n1 2 3 cd quickstart git init git submodule add https://github.com/theNewDynamic/gohugo-theme-ananke.git themes/ananke Then, add the theme to the site configuration:\n1 echo theme = \\\u0026#34;ananke\\\u0026#34; \u0026gt;\u0026gt; config.toml Step 4: Add Some Content You can manually create content files (for example as content/\u0026lt;CATEGORY\u0026gt;/\u0026lt;FILE\u0026gt;.\u0026lt;FORMAT\u0026gt;) and provide metadata in them, however you can use the new command to do a few things for you (like add title and date):\n1 hugo new posts/my-first-post.md Edit the newly created content file if you want, it will start with something like this:\n1 2 3 4 5 --- title: \u0026#34;My First Post\u0026#34; date: 2019-03-26T08:47:11+01:00 draft: true --- Drafts do not get deployed; once you finish a post, update the header of the post to say draft: false. More info here.\nStep 5: Start the Hugo server Now, start the Hugo server with drafts enabled:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 ▶ hugo server -D | EN +------------------+----+ Pages | 10 Paginator pages | 0 Non-page files | 0 Static files | 3 Processed images | 0 Aliases | 1 Sitemaps | 1 Cleaned | 0 Total in 11 ms Watching for changes in /Users/bep/quickstart/{content,data,layouts,static,themes} Watching for config changes in /Users/bep/quickstart/config.toml Environment: \u0026#34;development\u0026#34; Serving pages from memory Running in Fast Render Mode. For full rebuilds on change: hugo server --disableFastRender Web Server is available at http://localhost:1313/ (bind address 127.0.0.1) Press Ctrl+C to stop Navigate to your new site at http://localhost:1313/.\nFeel free to edit or add new content and you will see the changes in the browser right away while the Hugo server is running. (You might need to force refresh your web browser, something like Ctrl-R usually works.)\nStep 6: Customize the Theme Your new site already looks great, but you will want to tweak it a little before you release it to the public.\nSite Configuration Open up config.toml in a text editor:\n1 2 3 4 baseURL = \u0026#34;https://example.org/\u0026#34; languageCode = \u0026#34;en-us\u0026#34; title = \u0026#34;My New Hugo Site\u0026#34; theme = \u0026#34;ananke\u0026#34; Replace the title above with something more personal. Also, if you already have a domain ready, set the baseURL. Note that this value is not needed when running the local development server.\nTip: Make the changes to the site configuration or any other file in your site while the Hugo server is running, and you will see the changes in the browser right away, though you may need to clear your cache.\nFor theme specific configuration options, see the theme site.\nFor further theme customization, see Customize a Theme.\nStep 7: Build static pages It is simple. Just call:\n1 hugo -D Output will be in ./public/ directory by default (-d/--destination flag to change it, or set publishdir in the config file).\n","permalink":"https://lsgxs.github.io/posts/technology/hugo-quickstart/","summary":"Quick Start Create a Hugo site using the beautiful Ananke theme.\nThis quick start uses macOS in the examples. For instructions about how to install Hugo on other operating systems, see install.\nIt is required to have Git installed to run this tutorial.\nFor other approaches to learning Hugo (like books or video tutorials), refer to the external learning resources page.\nStep 1: Install Hugo Install the extended version of Hugo (this is required for the current theme used).","title":"Hugo Quickstart"},{"content":"hugo文档的目录组织结构 在posts目录下直接保存markdow文档 在posts目录下以文档名新建目录，在这新建的目录下新家index.md，新建一个image目录来保存文章引用的图片资源。 因为index.md和image是同一个层级的结构，无论是在front matter区域的featured_image，还是正文区域的图片，都可以直接引用这个同级目录下保存的资源文件。 如下图所示：\n也就是以目录的形式来组织文档，不仅层次分明，而且引用的图片也可以得到正确渲染。\n","permalink":"https://lsgxs.github.io/posts/technology/hugo%E6%96%87%E6%A1%A3%E7%9A%84%E7%9B%AE%E5%BD%95%E7%BB%84%E7%BB%87%E7%BB%93%E6%9E%84/","summary":"hugo文档的目录组织结构 在posts目录下直接保存markdow文档 在posts目录下以文档名新建目录，在这新建的目录下新家index.md，新建一个image目录来保存文章引用的图片资源。 因为index.md和image是同一个层级的结构，无论是在front matter区域的featured_image，还是正文区域的图片，都可以直接引用这个同级目录下保存的资源文件。 如下图所示：\n也就是以目录的形式来组织文档，不仅层次分明，而且引用的图片也可以得到正确渲染。","title":"Hugo文档的目录组织结构"},{"content":"安装hugo hugo一个快速的博客生成器，只需要下载一个二进制的可执行文件即可。下载后可以保持下面的目录结构：\nc:/hugo/bin \u0026ndash;把这个目录的路径添加在Windows的系统path里。 c:/hugo/sites 新建一个hugo 站点\n1 2 3 4 5 6 cd sites hugo new site quickstart cd quickstart git init git submodule add https://github.com/theNewDynamic/gohugo-theme-ananke.git themes/ananke -- 修改config.toml文件，添加theme = \u0026#34;theme-name\u0026#34; 新建一个文档\nhugo new posts/your-first-post.md \u0026ndash;posts是hugo项目保存marddown文档的目录\n1 2 3 4 hugo new posts/以文档的名字作为目录名称-不能包含空格/index.md --真正的markdown文档是index.md ，以目录为核心来组织文档，在index.md的同级目录下建立image目录，保存文档引用的图片。 --用这种方式来组织hugo文档，在渲染文档引用的图片时不易出错。 hugo server -D \u0026ndash;注意这里是大写字母D \u0026ndash;把生成的静态网页文件保存在public目录，然后\n​ \u0026ndash;在浏览器用http://localhost:1313可以浏览文档\n一般可以采用hugo --cleanDestinationDir 来全新生成博客文档\n","permalink":"https://lsgxs.github.io/posts/technology/%E5%BF%AB%E9%80%9F%E5%AE%89%E8%A3%85%E5%92%8C%E4%BD%BF%E7%94%A8hugo/","summary":"安装hugo hugo一个快速的博客生成器，只需要下载一个二进制的可执行文件即可。下载后可以保持下面的目录结构：\nc:/hugo/bin \u0026ndash;把这个目录的路径添加在Windows的系统path里。 c:/hugo/sites 新建一个hugo 站点\n1 2 3 4 5 6 cd sites hugo new site quickstart cd quickstart git init git submodule add https://github.com/theNewDynamic/gohugo-theme-ananke.git themes/ananke -- 修改config.toml文件，添加theme = \u0026#34;theme-name\u0026#34; 新建一个文档\nhugo new posts/your-first-post.md \u0026ndash;posts是hugo项目保存marddown文档的目录\n1 2 3 4 hugo new posts/以文档的名字作为目录名称-不能包含空格/index.md --真正的markdown文档是index.md ，以目录为核心来组织文档，在index.md的同级目录下建立image目录，保存文档引用的图片。 --用这种方式来组织hugo文档，在渲染文档引用的图片时不易出错。 hugo server -D \u0026ndash;注意这里是大写字母D \u0026ndash;把生成的静态网页文件保存在public目录，然后\n​ \u0026ndash;在浏览器用http://localhost:1313可以浏览文档\n一般可以采用hugo --cleanDestinationDir 来全新生成博客文档","title":"快速安装和使用hugo"},{"content":"在hugo的post中如何引用图片 第一个引用图片的位置是在文章的front matter区域，一般使用featured_image: \u0026quot;images/xxx.png\u0026quot;\n这个图片默认显示在文章的左边，相当于一个缩略图，装饰作用。\n在这个位置显示的图片，如果在static目录下建立images目录保存引用的图片的话，发布到github的username.github.io时，却因为无法找到文件而不能渲染。以文章名字新建目录，然后在这个目录下修改markdown文档的名字为index.md，在同级别的目录下新建一个image目录，用来保存在front matte区域显示的缩略图图片。目录结构如下\n1 2 3 4 5 6 1+----Hugo-Post中的图像资源引用方法 以文档的名字作为目录名新建目录 2+----image 3+----冰山.png 2+----index.md 上面的1、2、3代表3个层级,在index.md内用image/冰山.png的格式引用图片，index.md与image目录同级，直接引用就可以了。 hugo new posts/文档的名字-保持目录名字不能有空格/index.md 第二个引用图片的位置是在正文区域，一般使用![](/images/xxx.png)\n这个位置引用的图片可以在static目录下新建一个images目录，在images目录下保存要引用的图片。 ","permalink":"https://lsgxs.github.io/posts/technology/hugo-post%E4%B8%AD%E7%9A%84%E5%9B%BE%E5%83%8F%E8%B5%84%E6%BA%90%E5%BC%95%E7%94%A8%E6%96%B9%E6%B3%95/","summary":"在hugo的post中如何引用图片 第一个引用图片的位置是在文章的front matter区域，一般使用featured_image: \u0026quot;images/xxx.png\u0026quot;\n这个图片默认显示在文章的左边，相当于一个缩略图，装饰作用。\n在这个位置显示的图片，如果在static目录下建立images目录保存引用的图片的话，发布到github的username.github.io时，却因为无法找到文件而不能渲染。以文章名字新建目录，然后在这个目录下修改markdown文档的名字为index.md，在同级别的目录下新建一个image目录，用来保存在front matte区域显示的缩略图图片。目录结构如下\n1 2 3 4 5 6 1+----Hugo-Post中的图像资源引用方法 以文档的名字作为目录名新建目录 2+----image 3+----冰山.png 2+----index.md 上面的1、2、3代表3个层级,在index.md内用image/冰山.png的格式引用图片，index.md与image目录同级，直接引用就可以了。 hugo new posts/文档的名字-保持目录名字不能有空格/index.md 第二个引用图片的位置是在正文区域，一般使用![](/images/xxx.png)\n这个位置引用的图片可以在static目录下新建一个images目录，在images目录下保存要引用的图片。 ","title":"Hugo Post中的图像资源引用方法"},{"content":" 首先取消用户名和邮箱的全局设置\ngit config --list查看一下全局配置参数列表，如果列表显示里包含自己设置的github登录用户名和邮箱，就使用下面两条命令取消全局配置参数：\ngit config --global --unset user.name “your-name-for-github”\ngit config --global --unset user.email \u0026ldquo;your-mailbox-for-github\u0026rdquo;\n使用ssh-keygen分别生成多个github账户对应的密钥对\nssh-keygen -t ed25519 -f id_ed25519_hexo -C \u0026quot;mailbox-for-github\u0026quot;\nssh-keygen -t ed25519 -f id_ed25519_hugo -C \u0026quot;mailbox-for-github\u0026quot;\nssh-keygen -t ed25519 -f id_ed25519_tiddlywiki -C \u0026quot;mailbox-for-github\u0026quot;\n1 2 3 4 1、 把对应账号的公钥添加在github的settings-\u0026gt;ssh 2、启动ssh-agent添加私钥 eval $(ssh-agent) ssh-add id_xxxxxx --后面的参数是对应的私钥文件名 在~/.ssh目录下新建config文件（没有扩展名的文本文件），内容如下：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 #first Host hexo HostName github.com User username_for_githbu IdentityFile ~/.ssh/id_xxxxxx #second Host hugo HostName github.com User username_for_github IdentityFile ~/.ssh/id_ed25xxxxxx #Third Host tiddlywiki HostName github.com User username_for_github IdentityFile ~/.ssh/id_edxxxxx --Host是主机的别名 --HostName都是github.com --User对应三个github账户的用户名 --IdentityFile 是~/.ssh/目录下对应的私钥文件名称 配置好密钥对文件和config文件之后，测试ssh通过git协议能否联通github\n1 2 3 ssh -T git@hexo ssh -T git@hugo ssh -T git@tiddlywiki 如果测试成功，就会返回类似的信息：Hi your-user-name! You\u0026rsquo;ve successfully authenticated, but GitHub does not provide shell access 有了配置文件之后，以后添加远程连接时就要使用主机别名的方法，比如：\ngit remote add origin git@hugo:username/username.github.io.git git push -u origin main 在其他电脑使用同样配置\n如果在别的电脑也可以实现一台机器管理多个github账号，可以把Windows当前用户/.ssh目录下的config、所有账号对应的密钥对文件都复制到目标电脑，就可以实现在不同机器上实现同样的功能。\n","permalink":"https://lsgxs.github.io/posts/technology/%E5%9C%A8%E4%B8%80%E5%8F%B0%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%B8%8A%E7%94%A8git%E7%AE%A1%E7%90%86%E5%A4%9A%E4%B8%AAgithub%E8%B4%A6%E5%8F%B7/","summary":"首先取消用户名和邮箱的全局设置\ngit config --list查看一下全局配置参数列表，如果列表显示里包含自己设置的github登录用户名和邮箱，就使用下面两条命令取消全局配置参数：\ngit config --global --unset user.name “your-name-for-github”\ngit config --global --unset user.email \u0026ldquo;your-mailbox-for-github\u0026rdquo;\n使用ssh-keygen分别生成多个github账户对应的密钥对\nssh-keygen -t ed25519 -f id_ed25519_hexo -C \u0026quot;mailbox-for-github\u0026quot;\nssh-keygen -t ed25519 -f id_ed25519_hugo -C \u0026quot;mailbox-for-github\u0026quot;\nssh-keygen -t ed25519 -f id_ed25519_tiddlywiki -C \u0026quot;mailbox-for-github\u0026quot;\n1 2 3 4 1、 把对应账号的公钥添加在github的settings-\u0026gt;ssh 2、启动ssh-agent添加私钥 eval $(ssh-agent) ssh-add id_xxxxxx --后面的参数是对应的私钥文件名 在~/.ssh目录下新建config文件（没有扩展名的文本文件），内容如下：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 #first Host hexo HostName github.","title":"在一台计算机上用git管理多个github账号"},{"content":"","permalink":"https://lsgxs.github.io/about/","summary":"about","title":"about"},{"content":"","permalink":"https://lsgxs.github.io/links/","summary":"links","title":"Links"}]